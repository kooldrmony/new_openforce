{"version":3,"sources":["components/Header/Header.js","components/SmallButton/SmallButton.js","components/MediumButton/MediumButton.js","components/LargeButton/LargeButton.js","components/QuoteOption/QuoteOption.js","components/Button/Button.js","components/Quotes/Quotes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","SmallButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClicked","postQuote","setState","quoteButton","axios","get","then","response","push","data","console","log","catch","error","state","id","onClick","React","Component","MediumButton","handleClick","clicked","wordsInQuote","split","bind","assertThisInitialized","LargeButton","QuoteOption","components_SmallButton_SmallButton","components_MediumButton_MediumButton","components_LargeButton_LargeButton","Button","toggleDiv","show","components_QuoteOption_QuoteOption","Quotes","quotes","quoteGenerator","App","components_Header_Header","components_Button_Button","components_Quotes_Quotes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.432a361b.chunk.js","sourcesContent":["//This component is the header of the application showing the title\r\n\r\nimport React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <header className=\"header\">\r\n    <h1>Ron Swanson Swag!</h1>\r\n    <h2>\r\n      Click on the button below to get your daily dose of Swanson Swag!\r\n    </h2>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","/*This component is the small button component the will\r\nreturn a quote of four words or less if clicked */\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n// import Quotes from '../Quotes';\r\n\r\n\r\nclass SmallButton extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tquoteButton: null\t\t}\r\n\t}\r\n\r\n\r\n\thandleClicked = () => {\r\n\t\tconst postQuote = [];\r\n\t\tthis.setState({ quoteButton : postQuote });\r\n\t\t\t\taxios.get('http://ron-swanson-quotes.herokuapp.com/v2/quotes')\r\n\t\t\t\t\t.then(function (response) {\r\n\t\t\t\t\t\t//currently logging the response in the console.\r\n\t\t\t\t\t\tpostQuote.push(response.data[0])\r\n\t\t\t\t\t\tconsole.log(postQuote)\r\n\t\t\t\t\t\t\t \t\t\t\t})\r\n\t\t\t\t\t.catch(function (error) {\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button id=\"smallButton\" onClick={this.handleClicked}>\r\n\t\t\t\tSmall Quote\r\n\t\t\t\t</button>\r\n\t\t\t\t<p>{this.state.handleClicked}</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SmallButton;","/* This component is the medium button component that will return \r\na Swanson Quote that is 5 to 12 words long */\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass MediumButton extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tclicked: false\r\n\t\t}\r\n\r\n\t\tthis.handleClick = this.handleClick.bind(this)\r\n\t}\r\n\r\n\thandleClick = () => {\r\n\t\tthis.setState({\r\n\t\t\tclicked: true\r\n\t\t})\r\n\r\n\t\t\taxios.get('http://ron-swanson-quotes.herokuapp.com/v2/quotes')\r\n\t\t\t\t\t.then(function (response) {\r\n\t\t\t\t\t\t//currently logging the response in the console.\r\n\t\t\t\t\t\t// console.log(response.data[0]);\r\n\t\t\t\t\t\tconst wordsInQuote = response.data[0].split(\" \")\r\n\t\t\t\t\t\tconsole.log(wordsInQuote);\r\n\t\t\t\t\t\tif (wordsInQuote < 4) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Small Quote\");\r\n\t\t\t\t\t\t\t} else if (wordsInQuote > 5 && wordsInQuote < 12) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Medium quote\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Large quote\");\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// if(wordsInQuote <= 4) {\r\n\t\t\t\t\t\t// \tconsole.log(\"The quotes is less than 4 words\")\r\n\t \t\t\t\t})\r\n\t\t\t\t\t.catch(function (error) {\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button id=\"mediumButton\" onClick={this.handleClick}>\r\n\t\t\t\tMedium Quote\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default MediumButton;","/*This component is the large button giving the user a Swanson quote \r\nthat is 13 words or larger if clicked */\r\n\r\nimport React from 'react';\r\n\r\nclass LargeButton extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button id=\"largeButton\">\r\n\t\t\t\tLarge Quote\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default LargeButton;","/*This component is responsible for asking and giving the user an option to \r\nchoose the size of quote they want*/\r\n\r\nimport React, { Component } from 'react';\r\nimport \"./QuoteOption.css\";\r\nimport SmallButton from \"../SmallButton\";\r\nimport MediumButton from \"../MediumButton\";\r\nimport LargeButton from \"../LargeButton\";\r\n\r\nclass QuoteOption extends Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h3>\r\n    \t\t\t\tChoose between small, medium, or large Swanson words of Wisdom!\r\n    \t\t\t</h3>\r\n    \t\t\t<div id=\"container\">\r\n    \t\t\t\t<SmallButton />\r\n    \t\t\t\t<MediumButton />\r\n    \t\t\t\t<LargeButton />\r\n      \t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default QuoteOption;\r\n","//This component is the button that asks the user to click on the button to get a quote\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\nimport QuoteOption from '../QuoteOption';\r\n\r\nclass Button extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tshow : false\r\n\t\t}\r\n\r\n\t\tthis.toggleDiv = this.toggleDiv.bind(this)\r\n\t}\r\n\r\n\ttoggleDiv = () => {\r\n\t\tthis.setState({ show : true })\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Button\">\r\n\t\t\t\t<button id=\"small\" onClick={this.toggleDiv}>\r\n\t\t\t\t\tClick for Swanson's Words of Wisdom\r\n\t\t\t\t</button>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t{this.state.show && <QuoteOption />}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n} \r\n\r\nexport default Button;\r\n","/*This component pulls the Swanson Quotes from the “Ron Swanson Quotes API”\r\nusing Axios and generates the quote to the screen */\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Quotes extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tquotes: null\r\n\t\t}\r\n\r\n\t\tthis.quoteGenerator = this.quoteGenerator.bind(this)\r\n\t\t// this.showQuote = this.showQuote.bind(this)\r\n\t}\r\n\r\n\t\t// componentDidMount() {\r\n\r\n\t\t// \tthis.quoteGenerator();\r\n\t\t// }\r\n\r\n\t\tquoteGenerator() {\r\n\t\t\t\taxios.get('http://ron-swanson-quotes.herokuapp.com/v2/quotes')\r\n\t\t\t\t\t.then(function (response) {\r\n\t\t\t\t\t\tconst wordsInQuote = response.data[0];\r\n\t\t\t\t\t\t//currently logging the response in the console\r\n\t\t\t\t\t\tconsole.log(wordsInQuote);\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tquotes: wordsInQuote\r\n\t\t\t\t\t\t})\r\n\r\n\t \t\t\t\t})\r\n\t\t\t\t\t.catch(function (error) {\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t})\r\n\r\n\t\t\t};\r\n\r\n\t\t// showQuote() {\r\n\t\t// \tthis.setState({\r\n\t\t// \t\tquotes: this.quoteGenerator().push(response.data[0])\r\n\t\t// \t})\r\n\t\t// }\r\n\r\n\r\n/*Next step Create a method to take the chosen quote and use the .split method to \r\ncount the number of words in the randomly selected quote to choose whether it is \r\nsmall, medium or large. Create a handle method in each of the small, medium and large\r\ncomponents to generate the quote based on which button is clicked*/\r\n\t\t\t\t// <ul>\r\n\t\t\t\t// \t{this.state.quotes.push(quote => (\r\n\t\t\t\t// \t\t<li>{quote.data[0]}</li>\r\n\t\t\t\t// \t\t))}\r\n\t\t\t\t// \t{this.state.quotes.push(quote => (\r\n\t\t\t\t// \t\t<li>{quote.data[0]}</li>\r\n\t\t\t\t// \t\t))}\r\n\t\t\t\t// </ul>\r\n\r\n\t\t\t\t// \t\t\t\t<p>{this.state.quotes.map(quote => {\r\n\t\t\t\t// \tthis.state.quotes\r\n\t\t\t\t// })}</p>\r\n\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.quotes}\r\n\t\t\t</div>\r\n\t\t)\t\t\r\n\t}\r\n};\r\n\r\nexport default Quotes;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Button from \"./components/Button\";\nimport Quotes from \"./components/Quotes\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Button />\n        <Quotes />\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}